//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClusterTesterService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClusterTesterService.IClusterTesterService")]
    public interface IClusterTesterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClusterTesterService/RunTask", ReplyAction="http://tempuri.org/IClusterTesterService/RunTaskResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(string), Action="http://tempuri.org/IClusterTesterService/RunTaskStringFault", Name="string", Namespace="http://schemas.microsoft.com/2003/10/Serialization/")]
        ClusterTesterService.RunTaskResponse RunTask(ClusterTesterService.RunTaskRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClusterTesterService/RunTask", ReplyAction="http://tempuri.org/IClusterTesterService/RunTaskResponse")]
        System.IAsyncResult BeginRunTask(ClusterTesterService.RunTaskRequest request, System.AsyncCallback callback, object asyncState);
        
        ClusterTesterService.RunTaskResponse EndRunTask(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunTask", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RunTaskRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int taskId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int taskTime;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public double failureChance;
        
        public RunTaskRequest() {
        }
        
        public RunTaskRequest(int taskId, int taskTime, double failureChance) {
            this.taskId = taskId;
            this.taskTime = taskTime;
            this.failureChance = failureChance;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RunTaskResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RunTaskResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public int[] RunTaskResult;
        
        public RunTaskResponse() {
        }
        
        public RunTaskResponse(int[] RunTaskResult) {
            this.RunTaskResult = RunTaskResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClusterTesterServiceChannel : ClusterTesterService.IClusterTesterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RunTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RunTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClusterTesterService.RunTaskResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClusterTesterService.RunTaskResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClusterTesterServiceClient : System.ServiceModel.ClientBase<ClusterTesterService.IClusterTesterService>, ClusterTesterService.IClusterTesterService {
        
        private BeginOperationDelegate onBeginRunTaskDelegate;
        
        private EndOperationDelegate onEndRunTaskDelegate;
        
        private System.Threading.SendOrPostCallback onRunTaskCompletedDelegate;
        
        public ClusterTesterServiceClient() {
        }
        
        public ClusterTesterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClusterTesterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClusterTesterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClusterTesterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<RunTaskCompletedEventArgs> RunTaskCompleted;
        
        public ClusterTesterService.RunTaskResponse RunTask(ClusterTesterService.RunTaskRequest request) {
            return base.Channel.RunTask(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRunTask(ClusterTesterService.RunTaskRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRunTask(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ClusterTesterService.RunTaskResponse EndRunTask(System.IAsyncResult result) {
            return base.Channel.EndRunTask(result);
        }
        
        private System.IAsyncResult OnBeginRunTask(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClusterTesterService.RunTaskRequest request = ((ClusterTesterService.RunTaskRequest)(inValues[0]));
            return this.BeginRunTask(request, callback, asyncState);
        }
        
        private object[] OnEndRunTask(System.IAsyncResult result) {
            ClusterTesterService.RunTaskResponse retVal = this.EndRunTask(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRunTaskCompleted(object state) {
            if ((this.RunTaskCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RunTaskCompleted(this, new RunTaskCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RunTaskAsync(ClusterTesterService.RunTaskRequest request) {
            this.RunTaskAsync(request, null);
        }
        
        public void RunTaskAsync(ClusterTesterService.RunTaskRequest request, object userState) {
            if ((this.onBeginRunTaskDelegate == null)) {
                this.onBeginRunTaskDelegate = new BeginOperationDelegate(this.OnBeginRunTask);
            }
            if ((this.onEndRunTaskDelegate == null)) {
                this.onEndRunTaskDelegate = new EndOperationDelegate(this.OnEndRunTask);
            }
            if ((this.onRunTaskCompletedDelegate == null)) {
                this.onRunTaskCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRunTaskCompleted);
            }
            base.InvokeAsync(this.onBeginRunTaskDelegate, new object[] {
                        request}, this.onEndRunTaskDelegate, this.onRunTaskCompletedDelegate, userState);
        }
    }
}
